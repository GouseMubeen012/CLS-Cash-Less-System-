# Docker Setup Guide for CLS Application

This guide will walk you through setting up Docker and deploying the CLS application using Docker containers.

## 1. Install Docker Desktop

### For macOS:
1. Download Docker Desktop for Mac from: https://www.docker.com/products/docker-desktop
2. Open the downloaded .dmg file and drag Docker to your Applications folder
3. Open Docker Desktop from your Applications folder
4. Wait for Docker to start (the whale icon in the menu bar should stop animating)

### For Windows:
1. Download Docker Desktop for Windows from: https://www.docker.com/products/docker-desktop
2. Run the installer and follow the prompts
3. Start Docker Desktop from the Start menu
4. Wait for Docker to start (the whale icon in the system tray should stop animating)

## 2. Verify Docker Installation

Open a terminal/command prompt and run:
```
docker --version
docker compose version
```

Both commands should return version information without errors.

## 3. Project Structure

The CLS application consists of three main components:
- Backend (Node.js Express server)
- Frontend (React admin interface)
- Store Frontend (React store interface)

## 4. Docker Configuration Files

The following Docker configuration files have been created:

1. `/backend/Dockerfile` - Configuration for the backend container
2. `/frontend/Dockerfile` - Configuration for the frontend container
3. `/store-frontend/Dockerfile` - Configuration for the store frontend container
4. `/docker-compose.yml` - Orchestrates all three containers
5. `/frontend/nginx.conf` - NGINX configuration for the frontend
6. `/store-frontend/nginx.conf` - NGINX configuration for the store frontend

## 5. Building and Running the Application

1. Open a terminal and navigate to the project root directory:
```
cd /Users/mohammedgousemubeen/Desktop/p/Cls
```

2. Build and start the containers:
```
docker compose build
docker compose up -d
```

3. Verify the containers are running:
```
docker compose ps
```

You should see three containers running: cls-backend, cls-frontend, and cls-store-frontend.

## 6. Accessing the Application

Once the containers are running, you can access the application at:
- Backend API: http://localhost:5000
- Admin Frontend: http://localhost:3000
- Store Frontend: http://localhost:4000

## 7. Database Connection

The backend container is configured to connect to your local PostgreSQL database using the host.docker.internal hostname, which resolves to your host machine's IP address from within the container.

Make sure your PostgreSQL database is running and accessible on port 5432.

## 8. Stopping the Application

To stop the containers:
```
docker compose down
```

To stop and remove all containers, networks, and volumes:
```
docker compose down -v
```

## 9. Viewing Logs

To view logs from all containers:
```
docker compose logs
```

To view logs from a specific container:
```
docker compose logs backend
docker compose logs frontend
docker compose logs store-frontend
```

To follow the logs in real-time:
```
docker compose logs -f
```

## 10. Troubleshooting

### Container fails to start
Check the logs for the specific container:
```
docker compose logs [container_name]
```

### Database connection issues
Ensure your PostgreSQL database is running and accessible:
```
psql -h localhost -U postgres -d bank_admin_db
```

### Port conflicts
If you have services already running on ports 3000, 4000, or 5000, you can modify the port mappings in the docker-compose.yml file.

### Docker daemon not running
If you get an error about the Docker daemon not running, make sure Docker Desktop is running. Look for the whale icon in your menu bar/system tray.
